package com.z0ltan.compilers.triangle.scanner;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.equalTo;

import java.util.Iterator;

public class ScannerTest {
  static class ScannerTestCase {
    TokenType kind;
    String spelling;

    public ScannerTestCase(final TokenType kind, final String spelling) {
      this.kind = kind;
      this.spelling = spelling;
    }
  }

  public void testEmptyCommandEot() {
    String filename = "samples/source/emptycommandeot.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testEmptyCommandEotDegenerate() {
    String filename = "samples/source/emptycommandeot_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testEmptyCommandSemicolon() {
    String filename = "samples/source/emptycommandsemicolon.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testEmptyCommandSemicolonDegenerate() {
    String filename = "samples/source/emptycommandsemicolon_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testHello() {
    String filename = "samples/source/hello.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "42"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testHelloDegenerate() {
    String filename = "samples/source/hello_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "42"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testInc() {
    String filename = "samples/source/inc.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "inc"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "inc"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testIncDegenerate() {
    String filename = "samples/source/inc_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "inc"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "inc"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }


  public void testEcho() {
    String filename = "samples/source/echo.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "echo"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.IDENTIFIER, "echo"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testEchoDegenerate() {
    String filename = "samples/source/echo_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "echo"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.IDENTIFIER, "echo"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testOdd() {
    String filename = "samples/source/odd.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "odd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Boolean"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "2"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "\\="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "odd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "2"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testOddDegenerate() {
    String filename = "samples/source/odd_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "odd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Boolean"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "2"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "\\="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "odd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "2"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testSumProc() {
    String filename = "samples/source/sum_proc.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "add"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "add"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testSumProcDegenerate() {
    String filename = "samples/source/sum_proc_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "add"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "add"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testPower() {
    String filename = "samples/source/power.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "power"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "power"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "power"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testPowerDegenerate() {
    String filename = "samples/source/power_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "power"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "power"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "power"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testFactorial() {
    String filename = "samples/source/factorial.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "factorial"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "<="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "factorial"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnumber"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnumber"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "factorial"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testFactorialDegenerate() {
    String filename = "samples/source/factorial_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "factorial"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "<="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "factorial"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnumber"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnumber"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "factorial"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testRecord() {
    String filename = "samples/source/record.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "2021"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testRecordDegenerate() {
    String filename = "samples/source/record_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "2021"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "today"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "tomorrow"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testLeapYear() {
    String filename = "samples/source/leapyear.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leapyear"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Boolean"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "400"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "\\/"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "4"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "true"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "false"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leapyear"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testLeapYearDegenerate() {
    String filename = "samples/source/leapyear_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leapyear"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Boolean"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "400"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "\\/"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "4"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "true"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "false"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leapyear"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testPrintArray() {
    String filename = "samples/source/print_array.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "println"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iterate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "f"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "f"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iterate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "println"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testPrintArrayDegenerate() {
    String filename = "samples/source/print_array_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "println"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iterate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "f"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "f"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iterate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "println"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testDate() {
    String filename = "samples/source/date.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testDateDegenerate() {
    String filename = "samples/source/date_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testString() {
    String filename = "samples/source/string.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "buf"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.OF,"of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "buf"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "buf"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testStringDegenerate() {
    String filename = "samples/source/string_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "buf"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.OF,"of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "buf"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "buf"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "String"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testIteratively() {
    String filename = "samples/source/iteratively.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iteratively"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "p"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "p"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putintln"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iteratively"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iteratively"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putintln"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testIterativelyDegenerate() {
    String filename = "samples/source/iteratively_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iteratively"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "p"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "p"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putintln"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readnums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iteratively"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "iteratively"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putintln"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testReverseLine() {
    String filename = "samples/source/reverse_line.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "80"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "geteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, ">"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eof"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testReverseLineDegenerate() {
    String filename = "samples/source/reverse_line_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "80"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "geteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, ">"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eof"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testLine() {
    String filename = "samples/source/line.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "80"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testLineDegenerate() {
    String filename = "samples/source/line_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "80"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "length"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "l"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "content"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Line"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putreversedline"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "currentline"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testDates() {
    String filename = "samples/source/dates.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "xmas"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "25"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "easter"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "-"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdates"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "easter"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdates"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "xmas"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "easter"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testDatesDegenerate() {
    String filename = "samples/source/dates_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "xmas"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "25"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "easter"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "-"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdates"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "easter"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdates"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "xmas"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "easter"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "3"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaydate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "holidays"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testMonthsOfYear() {
    String filename = "samples/source/monthsofyear.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "months"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "printmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leap"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Boolean"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "400"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "\\/"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "4"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "true"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "false"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leap"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "29"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "28"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "getmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "printmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testMonthsOfYearDegenerate() {
    String filename = "samples/source/monthsofyear_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "months"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "printmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "m"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leap"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Boolean"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "100"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "400"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "\\/"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "4"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "true"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "false"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Date"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "leap"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "29"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "28"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "30"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "31"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readdate"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "12"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "getmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "printmonths"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ms"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }


  public void testCapitalise() {
    String filename = "samples/source/capitalise.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "shift"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "A"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalisechar"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "<="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "z"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "chr"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.IDENTIFIER, "shift"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalise"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalisechar"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalise"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testCapitaliseDegenerate() {
    String filename = "samples/source/capitalise_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "shift"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "A"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalisechar"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "<="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "z"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "chr"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.IDENTIFIER, "shift"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalise"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalisechar"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "5"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readstring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "capitalise"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaystring"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testFreq() {
    String filename = "samples/source/freq.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "initialize"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "increment"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "<="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "z"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "calculatefreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "increment"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayfreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "chr"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "="),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, ">"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "initialize"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "calculatefreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayfreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, ""),
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testFreqDegenerate() {
    String filename = "samples/source/freq_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "initialize"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "arr"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "increment"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "<="),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "z"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "calculatefreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Char"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.OPERATOR, "\\"),
          new ScannerTestCase(TokenType.IDENTIFIER, "eol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "get"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "increment"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ch"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayfreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "chr"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "ord"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "="),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, ">"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "26"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "initialize"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "calculatefreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayfreqs"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "freq"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, ""),
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testInsertionSort() {
    String filename = "samples/source/insertion_sort.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNumsSub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNumsSub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNumsSub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaySub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaySub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "display"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaySub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "insertionSort"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.OPERATOR, ">"),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "display"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "insertionSort"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "display"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testInsertionSortDegenerate() {
    String filename = "samples/source/insertion_sort_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNumsSub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNumsSub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNumsSub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaySub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaySub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "idx"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "stop"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "display"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displaySub"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "insertionSort"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.ARRAY, "array"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.OF, "of"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "<"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "10"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.WHILE, "while"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, ">="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "/\\"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.OPERATOR, ">"),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.DO, "do"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.LEFT_BRACKET, "["),
          new ScannerTestCase(TokenType.IDENTIFIER, "j"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.RIGHT_BRACKET, "]"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "key"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "i"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "1"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readNums"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "display"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "insertionSort"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "display"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "s"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testRationals() {
    String filename = "samples/source/rationals.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "gcd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "gcd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "g"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "gcd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "/"),
          new ScannerTestCase(TokenType.IDENTIFIER, "g"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.OPERATOR, "/"),
          new ScannerTestCase(TokenType.IDENTIFIER, "g"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "{"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, ","),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "}"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "addrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "subrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "addrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "subrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }

  public void testRationalsDegenerate() {
    String filename = "samples/source/rationals_degenerate.t";
    ScannerTestCase testCases[] = new ScannerTestCase[] {
      new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.TYPE, "type"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.RECORD, "record"),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "gcd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IF, "if"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.OPERATOR, "="),
          new ScannerTestCase(TokenType.INTEGER_LITERAL, "0"),
          new ScannerTestCase(TokenType.THEN, "then"),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.ELSE, "else"),
          new ScannerTestCase(TokenType.IDENTIFIER, "gcd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "x"),
          new ScannerTestCase(TokenType.OPERATOR, "//"),
          new ScannerTestCase(TokenType.IDENTIFIER, "y"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Integer"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "g"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "gcd"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.LEFT_CURLY, "{"),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "n"),
          new ScannerTestCase(TokenType.OPERATOR, "/"),
          new ScannerTestCase(TokenType.IDENTIFIER, "g"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.IDENTIFIER, "d"),
          new ScannerTestCase(TokenType.OPERATOR, "/"),
          new ScannerTestCase(TokenType.IDENTIFIER, "g"),
          new ScannerTestCase(TokenType.RIGHT_CURLY, "}"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "getint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.PROCEDURE, "proc"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "{"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, ","),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "putint"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "put"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.CHARACTER_LITERAL, "}"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "puteol"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "addrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "+"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.FUNCTION, "func"),
          new ScannerTestCase(TokenType.IDENTIFIER, "subrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LET, "let"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.OPERATOR, "-"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "numerator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.CONST, "const"),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.IS, "~"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "r1"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.OPERATOR, "*"),
          new ScannerTestCase(TokenType.IDENTIFIER, "r2"),
          new ScannerTestCase(TokenType.DOT, "."),
          new ScannerTestCase(TokenType.IDENTIFIER, "denominator"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.IDENTIFIER, "makerational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "num"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "denom"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.COLON, ":"),
          new ScannerTestCase(TokenType.IDENTIFIER, "Rational"),
          new ScannerTestCase(TokenType.IN, "in"),
          new ScannerTestCase(TokenType.BEGIN, "begin"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "readrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.VAR, "var"),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "addrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.BECOMES, ":="),
          new ScannerTestCase(TokenType.IDENTIFIER, "subrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "a"),
          new ScannerTestCase(TokenType.COMMA, ","),
          new ScannerTestCase(TokenType.IDENTIFIER, "b"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.IDENTIFIER, "displayrational"),
          new ScannerTestCase(TokenType.LEFT_PAREN, "("),
          new ScannerTestCase(TokenType.IDENTIFIER, "c"),
          new ScannerTestCase(TokenType.RIGHT_PAREN, ")"),
          new ScannerTestCase(TokenType.SEMICOLON, ";"),
          new ScannerTestCase(TokenType.END, "end"),
          new ScannerTestCase(TokenType.EOT, "")
    };

    Scanner scanner = new Scanner(filename);
    for (int i = 0; i < testCases.length; i++) {
      Token token = scanner.scan();
      assertThat(testCases[i].kind, is(equalTo(token.kind)));
      assertThat(testCases[i].spelling, is(equalTo(token.spelling)));
    }
  }
}
